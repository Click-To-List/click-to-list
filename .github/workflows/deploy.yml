name: Deploy to EC2 via OIDC + SSM

on:
  push:
    branches: [ dev, stage, main ]

permissions:
  id-token: write   # required for OIDC
  contents: read

env:
  AWS_REGION: us-east-1
  PARAM_TOKEN_PATH: /deploy/github/token
  APP_TAG: ctl-api

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (for metadata only)
        uses: actions/checkout@v4

      - name: Determine environment / role based on branch
        id: select
        shell: bash
        run: |
          BRANCH="${GITHUB_REF##*/}"
          case "$BRANCH" in
            dev)
              echo "ROLE_ARN=${{ secrets.AWS_ROLE_DEV_ARN }}" >> $GITHUB_ENV
              echo "EC2_ENV=dev" >> $GITHUB_ENV
              echo "SECRET_NAME=myapi/env/dev" >> $GITHUB_ENV
              echo "DEPLOY_BRANCH=dev" >> $GITHUB_ENV
              ;;
            staging)
              echo "ROLE_ARN=${{ secrets.AWS_ROLE_STAGING_ARN }}" >> $GITHUB_ENV
              echo "EC2_ENV=staging" >> $GITHUB_ENV
              echo "SECRET_NAME=myapi/env/staging" >> $GITHUB_ENV
              echo "DEPLOY_BRANCH=staging" >> $GITHUB_ENV
              ;;
            main)
              echo "ROLE_ARN=${{ secrets.AWS_ROLE_PROD_ARN }}" >> $GITHUB_ENV
              echo "EC2_ENV=prod" >> $GITHUB_ENV
              echo "SECRET_NAME=myapi/env/prod" >> $GITHUB_ENV
              echo "DEPLOY_BRANCH=main" >> $GITHUB_ENV
              ;;
            *)
              echo "Unsupported branch: $BRANCH"; exit 1
              ;;
          esac

      - name: Debug OIDC token (claims)
        shell: bash
        run: |
          set -euo pipefail
          TOKEN_JSON="$(curl -sS -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=sts.amazonaws.com")"
          echo "$TOKEN_JSON" | jq -r .value > /tmp/idtoken.jwt

          b64url_decode() {
            local INPUT="$1"
            # Convert base64url -> base64 and pad
            local PAD=$(( (4 - ${#INPUT} % 4) % 4 ))
            printf '%s' "$INPUT" | tr '_-' '/+' | sed -E "s/$/$(printf '=%.0s' $(seq 1 $PAD))/" | base64 -d
          }

          HEADER="$(cut -d. -f1 /tmp/idtoken.jwt)"
          PAYLOAD="$(cut -d. -f2 /tmp/idtoken.jwt)"

          echo "SUB (subject):"
          b64url_decode "$PAYLOAD" | jq -r .sub

          echo "AUD (audience):"
          b64url_decode "$PAYLOAD" | jq -r .aud

          echo "REF (git ref):"
          b64url_decode "$PAYLOAD" | jq -r .ref

          echo "REPO / OWNER / EVENT:"
          b64url_decode "$PAYLOAD" | jq -r '.repository, .repository_owner, .event_name'

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Mint short-lived GitHub App token (if you're using the App-based pull)
      - name: Mint GitHub App installation token
        id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          installation-id: ${{ secrets.GH_APP_INSTALLATION_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Put short-lived token in SSM ParamStore
        run: |
          aws ssm put-parameter \
            --name "${{ env.PARAM_TOKEN_PATH }}" \
            --type "SecureString" \
            --value "${{ steps.app_token.outputs.token }}" \
            --overwrite

      - name: Deploy via SSM to tagged instances
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=tag:App,Values=${{ env.APP_TAG }}" "Key=tag:Environment,Values=${{ env.EC2_ENV }}" \
            --parameters commands="['sudo /home/ubuntu/deploy.sh ${{ env.EC2_ENV }} ${{ env.DEPLOY_BRANCH }} ${{ env.PARAM_TOKEN_PATH }} ${{ env.SECRET_NAME }}']" \
            --comment "Deploy ${{ env.APP_TAG }} $GITHUB_SHA to ${{ env.EC2_ENV }}" \
            --max-concurrency "1" \
            --max-errors "0" \
            --region ${{ env.AWS_REGION }}

      - name: Delete temporary token parameter
        if: always()
        run: |
          aws ssm delete-parameter --name "${{ env.PARAM_TOKEN_PATH }}" || true
